name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
      issues: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          npm install
          npm install -D eslint-formatter-junit

      - name: Build project
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        run: npm run build

      - name: Run ESLint
        run: npx eslint "pages/**/*.{js,jsx,ts,tsx}" --format junit --output-file eslint-report.xml
        continue-on-error: true

      - name: Publish ESLint Report
        if: always()
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: 'eslint-report.xml'
          check_name: ESLint Test Report
          fail_on_failure: false
          require_tests: false

  codeql:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      checks: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: Analyze CodeQL
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  dast:
    name: Dynamic Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      security-events: write
      pull-requests: write
      issues: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build project
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
        run: npm run build

      - name: Create Docker network
        run: docker network create dast-network

      - name: Serve Static Files in Docker
        run: |
          docker run --network dast-network \
            --name webapp \
            -v ${{ github.workspace }}/out:/usr/share/nginx/html:ro \
            -p 3000:80 \
            -d nginx:alpine

      - name: Wait for application
        run: |
          timeout 30 bash -c 'while ! curl -s http://localhost:3000 > /dev/null; do sleep 1; done'
          echo "Application is running"

      - name: Run Dastardly Action Step
        continue-on-error: true
        uses: PortSwigger/dastardly-github-action@main
        with:
          target-url: 'http://localhost:3000'
          output-filename: 'dastardly-report.xml'

      - name: Check for report file
        run: |
          ls -la
          if [ -f "dastardly-report.xml" ]; then
            echo "Report file exists"
            cat dastardly-report.xml
          else
            echo "Report file not found"
            exit 1
          fi

      - name: Publish Test Report
        if: always()
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: 'dastardly-report.xml'
          require_tests: false
          fail_on_failure: false

  secrets:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Gitleaks
        uses: zricethezav/gitleaks-action@v2

  deploy:
    name: Deploy to Cloudflare Pages
    needs: [build, codeql, dast, secrets]  # Only deploy if other jobs pass
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      deployments: write
    
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: npm install

      - name: Build project
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
        run: npm run build

      - name: Publish to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy out --project-name=hello-world-app
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
